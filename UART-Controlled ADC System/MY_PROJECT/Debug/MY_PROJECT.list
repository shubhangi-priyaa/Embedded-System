
MY_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800115c  0800115c  0000215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012d4  080012d4  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  080012d4  080012d4  000022d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080012dc  080012dc  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012dc  080012dc  000022dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012e0  080012e0  000022e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  080012e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  08001334  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08001334  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001460  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000070f  00000000  00000000  000044da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00004bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e8  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d0a7  00000000  00000000  00004e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002656  00000000  00000000  00011ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00045dcc  00000000  00000000  00014525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005a2f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000844  00000000  00000000  0005a334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0005ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000050 	.word	0x20000050
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001144 	.word	0x08001144

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000054 	.word	0x20000054
 800020c:	08001144 	.word	0x08001144

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	@ (80002e4 <__NVIC_EnableIRQ+0x34>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <adc_init>:

// ADC Configuration and functions
#define PA0_ADC_MODE (3 << 0)
#define ADC_SEQ_LEN_1 0

void adc_init(void) {
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    GPIOA->MODER |= PA0_ADC_MODE;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <adc_init+0x38>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000320 <adc_init+0x38>)
 80002f2:	f043 0303 	orr.w	r3, r3, #3
 80002f6:	6013      	str	r3, [r2, #0]
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <adc_init+0x3c>)
 80002fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002fc:	4a09      	ldr	r2, [pc, #36]	@ (8000324 <adc_init+0x3c>)
 80002fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000302:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <adc_init+0x40>)
 8000306:	2200      	movs	r2, #0
 8000308:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->CR2 |= ADC_CR2_ADON;
 800030a:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <adc_init+0x40>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a06      	ldr	r2, [pc, #24]	@ (8000328 <adc_init+0x40>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6093      	str	r3, [r2, #8]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40020000 	.word	0x40020000
 8000324:	40023800 	.word	0x40023800
 8000328:	40012000 	.word	0x40012000

0800032c <adc_int_init>:

void adc_int_init(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <adc_int_init+0x1c>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <adc_int_init+0x1c>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6053      	str	r3, [r2, #4]
    NVIC_EnableIRQ(ADC_IRQn);
 800033c:	2012      	movs	r0, #18
 800033e:	f7ff ffb7 	bl	80002b0 <__NVIC_EnableIRQ>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40012000 	.word	0x40012000

0800034c <adc_start_conversion>:

void adc_start_conversion(void) {
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000350:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <adc_start_conversion+0x18>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a03      	ldr	r2, [pc, #12]	@ (8000364 <adc_start_conversion+0x18>)
 8000356:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800035a:	6093      	str	r3, [r2, #8]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40012000 	.word	0x40012000

08000368 <adc_read>:

uint32_t adc_read(void) {
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
    while (!(ADC1->SR & ADC_SR_EOC));
 800036c:	bf00      	nop
 800036e:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <adc_read+0x20>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f9      	beq.n	800036e <adc_read+0x6>
    return (ADC1->DR);
 800037a:	4b03      	ldr	r3, [pc, #12]	@ (8000388 <adc_read+0x20>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800037e:	4618      	mov	r0, r3
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40012000 	.word	0x40012000

0800038c <ADC_IRQHandler>:

void ADC_IRQHandler(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
    if ((ADC1->SR & ADC_SR_EOC) != 0) {
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <ADC_IRQHandler+0x40>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	2b00      	cmp	r3, #0
 800039c:	d012      	beq.n	80003c4 <ADC_IRQHandler+0x38>
        ADC1->SR &= ~ADC_SR_EOC;
 800039e:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <ADC_IRQHandler+0x40>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a0a      	ldr	r2, [pc, #40]	@ (80003cc <ADC_IRQHandler+0x40>)
 80003a4:	f023 0302 	bic.w	r3, r3, #2
 80003a8:	6013      	str	r3, [r2, #0]
        volatile uint32_t value = ADC1->DR;
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <ADC_IRQHandler+0x40>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ae:	60fb      	str	r3, [r7, #12]
        char buffer[10];
        sprintf(buffer, "%lu\n\r", value);
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	463b      	mov	r3, r7
 80003b4:	4906      	ldr	r1, [pc, #24]	@ (80003d0 <ADC_IRQHandler+0x44>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 fa2c 	bl	8000814 <siprintf>
        UART2_SendString(buffer);
 80003bc:	463b      	mov	r3, r7
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f96e 	bl	80006a0 <UART2_SendString>
    }
}
 80003c4:	bf00      	nop
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40012000 	.word	0x40012000
 80003d0:	0800115c 	.word	0x0800115c

080003d4 <main>:
#include<usart.h>
#include<scc.h>
#include<operations.h>


int main(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
    SysClockConfig();
 80003da:	f000 f8b9 	bl	8000550 <SysClockConfig>
    Usart2_config();
 80003de:	f000 f975 	bl	80006cc <Usart2_config>

    while (1) {
        print_menu();
 80003e2:	f000 f813 	bl	800040c <print_menu>
        char option = receiverdata();
 80003e6:	f000 f9d5 	bl	8000794 <receiverdata>
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
        UART2_SendChar(option);
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f93d 	bl	8000670 <UART2_SendChar>
        UART2_SendString("\r\n");
 80003f6:	4804      	ldr	r0, [pc, #16]	@ (8000408 <main+0x34>)
 80003f8:	f000 f952 	bl	80006a0 <UART2_SendString>

        handle_option(option);
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 f81c 	bl	800043c <handle_option>
    while (1) {
 8000404:	bf00      	nop
 8000406:	e7ec      	b.n	80003e2 <main+0xe>
 8000408:	08001164 	.word	0x08001164

0800040c <print_menu>:

#include<operations.h>
#include<usart.h>
#include<adc.h>

void print_menu(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
    UART2_SendString("STM32 ADC Control Menu:\r\n");
 8000410:	4806      	ldr	r0, [pc, #24]	@ (800042c <print_menu+0x20>)
 8000412:	f000 f945 	bl	80006a0 <UART2_SendString>
    UART2_SendString("1. Start ADC Conversion\r\n");
 8000416:	4806      	ldr	r0, [pc, #24]	@ (8000430 <print_menu+0x24>)
 8000418:	f000 f942 	bl	80006a0 <UART2_SendString>
    UART2_SendString("2. Trigger ADC Interrupt\r\n");
 800041c:	4805      	ldr	r0, [pc, #20]	@ (8000434 <print_menu+0x28>)
 800041e:	f000 f93f 	bl	80006a0 <UART2_SendString>
    UART2_SendString("3. Exit\r\n");
 8000422:	4805      	ldr	r0, [pc, #20]	@ (8000438 <print_menu+0x2c>)
 8000424:	f000 f93c 	bl	80006a0 <UART2_SendString>
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	08001168 	.word	0x08001168
 8000430:	08001184 	.word	0x08001184
 8000434:	080011a0 	.word	0x080011a0
 8000438:	080011bc 	.word	0x080011bc

0800043c <handle_option>:

void handle_option(char option) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
    switch (option) {
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	2b33      	cmp	r3, #51	@ 0x33
 800044a:	d00c      	beq.n	8000466 <handle_option+0x2a>
 800044c:	2b33      	cmp	r3, #51	@ 0x33
 800044e:	dc0d      	bgt.n	800046c <handle_option+0x30>
 8000450:	2b31      	cmp	r3, #49	@ 0x31
 8000452:	d002      	beq.n	800045a <handle_option+0x1e>
 8000454:	2b32      	cmp	r3, #50	@ 0x32
 8000456:	d003      	beq.n	8000460 <handle_option+0x24>
 8000458:	e008      	b.n	800046c <handle_option+0x30>
        case '1':
            start_adc_conversion();
 800045a:	f000 f811 	bl	8000480 <start_adc_conversion>
            break;
 800045e:	e009      	b.n	8000474 <handle_option+0x38>
        case '2':
            trigger_adc_interrupt();
 8000460:	f000 f85c 	bl	800051c <trigger_adc_interrupt>
            break;
 8000464:	e006      	b.n	8000474 <handle_option+0x38>
        case '3':
            exit_program();
 8000466:	f000 f869 	bl	800053c <exit_program>
            break;
 800046a:	e003      	b.n	8000474 <handle_option+0x38>
        default:
            UART2_SendString("Invalid Option! Please enter '1', '2', or '3'\r\n");
 800046c:	4803      	ldr	r0, [pc, #12]	@ (800047c <handle_option+0x40>)
 800046e:	f000 f917 	bl	80006a0 <UART2_SendString>
            break;
 8000472:	bf00      	nop
    }
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	080011c8 	.word	0x080011c8

08000480 <start_adc_conversion>:

void start_adc_conversion(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
    UART2_SendString("Starting ADC Conversion...\r\n");
 8000486:	4820      	ldr	r0, [pc, #128]	@ (8000508 <start_adc_conversion+0x88>)
 8000488:	f000 f90a 	bl	80006a0 <UART2_SendString>
    adc_init();
 800048c:	f7ff ff2c 	bl	80002e8 <adc_init>
    adc_start_conversion();
 8000490:	f7ff ff5c 	bl	800034c <adc_start_conversion>
    uint32_t value = adc_read();
 8000494:	f7ff ff68 	bl	8000368 <adc_read>
 8000498:	60f8      	str	r0, [r7, #12]
    char buffer[10];
    sprintf(buffer, "%lu\n\r", value);
 800049a:	463b      	mov	r3, r7
 800049c:	68fa      	ldr	r2, [r7, #12]
 800049e:	491b      	ldr	r1, [pc, #108]	@ (800050c <start_adc_conversion+0x8c>)
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 f9b7 	bl	8000814 <siprintf>
    UART2_SendString(buffer);
 80004a6:	463b      	mov	r3, r7
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f8f9 	bl	80006a0 <UART2_SendString>

    while (1) {
        UART2_SendString("Continue ADC Conversion? (y/n): ");
 80004ae:	4818      	ldr	r0, [pc, #96]	@ (8000510 <start_adc_conversion+0x90>)
 80004b0:	f000 f8f6 	bl	80006a0 <UART2_SendString>
        char continue_option = receiverdata();
 80004b4:	f000 f96e 	bl	8000794 <receiverdata>
 80004b8:	4603      	mov	r3, r0
 80004ba:	72fb      	strb	r3, [r7, #11]
        UART2_SendChar(continue_option);
 80004bc:	7afb      	ldrb	r3, [r7, #11]
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f8d6 	bl	8000670 <UART2_SendChar>
        UART2_SendString("\r\n");
 80004c4:	4813      	ldr	r0, [pc, #76]	@ (8000514 <start_adc_conversion+0x94>)
 80004c6:	f000 f8eb 	bl	80006a0 <UART2_SendString>
        if (continue_option == 'n') {
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80004ce:	d016      	beq.n	80004fe <start_adc_conversion+0x7e>
            break;
        } else if (continue_option == 'y') {
 80004d0:	7afb      	ldrb	r3, [r7, #11]
 80004d2:	2b79      	cmp	r3, #121	@ 0x79
 80004d4:	d10f      	bne.n	80004f6 <start_adc_conversion+0x76>
            adc_start_conversion();
 80004d6:	f7ff ff39 	bl	800034c <adc_start_conversion>
            value = adc_read();
 80004da:	f7ff ff45 	bl	8000368 <adc_read>
 80004de:	60f8      	str	r0, [r7, #12]
            sprintf(buffer, "%lu\n\r", value);
 80004e0:	463b      	mov	r3, r7
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	4909      	ldr	r1, [pc, #36]	@ (800050c <start_adc_conversion+0x8c>)
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f994 	bl	8000814 <siprintf>
            UART2_SendString(buffer);
 80004ec:	463b      	mov	r3, r7
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f8d6 	bl	80006a0 <UART2_SendString>
 80004f4:	e7db      	b.n	80004ae <start_adc_conversion+0x2e>
        } else {
            UART2_SendString("Invalid Option! Please enter 'y' or 'n'\r\n");
 80004f6:	4808      	ldr	r0, [pc, #32]	@ (8000518 <start_adc_conversion+0x98>)
 80004f8:	f000 f8d2 	bl	80006a0 <UART2_SendString>
    while (1) {
 80004fc:	e7d7      	b.n	80004ae <start_adc_conversion+0x2e>
            break;
 80004fe:	bf00      	nop
        }
    }
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	080011f8 	.word	0x080011f8
 800050c:	08001218 	.word	0x08001218
 8000510:	08001220 	.word	0x08001220
 8000514:	08001244 	.word	0x08001244
 8000518:	08001248 	.word	0x08001248

0800051c <trigger_adc_interrupt>:

void trigger_adc_interrupt(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    UART2_SendString("Triggering ADC Interrupt...\r\n");
 8000520:	4805      	ldr	r0, [pc, #20]	@ (8000538 <trigger_adc_interrupt+0x1c>)
 8000522:	f000 f8bd 	bl	80006a0 <UART2_SendString>
    adc_init();
 8000526:	f7ff fedf 	bl	80002e8 <adc_init>
    adc_int_init();
 800052a:	f7ff feff 	bl	800032c <adc_int_init>
    adc_start_conversion();
 800052e:	f7ff ff0d 	bl	800034c <adc_start_conversion>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	08001274 	.word	0x08001274

0800053c <exit_program>:

void exit_program(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
    UART2_SendString("Exiting...\r\n");
 8000540:	4802      	ldr	r0, [pc, #8]	@ (800054c <exit_program+0x10>)
 8000542:	f000 f8ad 	bl	80006a0 <UART2_SendString>
    while(1);
 8000546:	bf00      	nop
 8000548:	e7fd      	b.n	8000546 <exit_program+0xa>
 800054a:	bf00      	nop
 800054c:	08001294 	.word	0x08001294

08000550 <SysClockConfig>:


#include<scc.h>

// System Clock Configuration
void SysClockConfig(void) {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
    #define PLL_M 4
    #define PLL_N 180
    #define PLL_P 0  // PLLP = 2

    RCC->CR |= RCC_CR_HSEON;
 8000554:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <SysClockConfig+0xa4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a26      	ldr	r2, [pc, #152]	@ (80005f4 <SysClockConfig+0xa4>)
 800055a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800055e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8000560:	bf00      	nop
 8000562:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <SysClockConfig+0xa4>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <SysClockConfig+0x12>

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <SysClockConfig+0xa4>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000572:	4a20      	ldr	r2, [pc, #128]	@ (80005f4 <SysClockConfig+0xa4>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000578:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 800057a:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <SysClockConfig+0xa8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a1e      	ldr	r2, [pc, #120]	@ (80005f8 <SysClockConfig+0xa8>)
 8000580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000584:	6013      	str	r3, [r2, #0]

    FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 8000586:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <SysClockConfig+0xac>)
 8000588:	f240 7205 	movw	r2, #1797	@ 0x705
 800058c:	601a      	str	r2, [r3, #0]

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <SysClockConfig+0xa4>)
 8000590:	4a18      	ldr	r2, [pc, #96]	@ (80005f4 <SysClockConfig+0xa4>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000596:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <SysClockConfig+0xa4>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	4a16      	ldr	r2, [pc, #88]	@ (80005f4 <SysClockConfig+0xa4>)
 800059c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80005a0:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <SysClockConfig+0xa4>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	4a13      	ldr	r2, [pc, #76]	@ (80005f4 <SysClockConfig+0xa4>)
 80005a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005ac:	6093      	str	r3, [r2, #8]

    RCC->PLLCFGR = (PLL_M << 0) | (PLL_N << 6) | (PLL_P << 16) | (RCC_PLLCFGR_PLLSRC_HSE);
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <SysClockConfig+0xa4>)
 80005b0:	4a13      	ldr	r2, [pc, #76]	@ (8000600 <SysClockConfig+0xb0>)
 80005b2:	605a      	str	r2, [r3, #4]

    RCC->CR |= RCC_CR_PLLON;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <SysClockConfig+0xa4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <SysClockConfig+0xa4>)
 80005ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005be:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 80005c0:	bf00      	nop
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <SysClockConfig+0xa4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0f9      	beq.n	80005c2 <SysClockConfig+0x72>

    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <SysClockConfig+0xa4>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	4a08      	ldr	r2, [pc, #32]	@ (80005f4 <SysClockConfig+0xa4>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80005da:	bf00      	nop
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <SysClockConfig+0xa4>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f003 030c 	and.w	r3, r3, #12
 80005e4:	2b08      	cmp	r3, #8
 80005e6:	d1f9      	bne.n	80005dc <SysClockConfig+0x8c>
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000
 80005fc:	40023c00 	.word	0x40023c00
 8000600:	00402d04 	.word	0x00402d04

08000604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800060c:	4a14      	ldr	r2, [pc, #80]	@ (8000660 <_sbrk+0x5c>)
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <_sbrk+0x60>)
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000618:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <_sbrk+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <_sbrk+0x64>)
 8000622:	4a12      	ldr	r2, [pc, #72]	@ (800066c <_sbrk+0x68>)
 8000624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <_sbrk+0x64>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	429a      	cmp	r2, r3
 8000632:	d207      	bcs.n	8000644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000634:	f000 f90e 	bl	8000854 <__errno>
 8000638:	4603      	mov	r3, r0
 800063a:	220c      	movs	r2, #12
 800063c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	e009      	b.n	8000658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000644:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <_sbrk+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <_sbrk+0x64>)
 8000654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20020000 	.word	0x20020000
 8000664:	00000400 	.word	0x00000400
 8000668:	2000006c 	.word	0x2000006c
 800066c:	200001b8 	.word	0x200001b8

08000670 <UART2_SendChar>:


#include<usart.h>

// UART Configuration and functions
void UART2_SendChar(char ch) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    USART2->DR = ch;
 800067a:	4a08      	ldr	r2, [pc, #32]	@ (800069c <UART2_SendChar+0x2c>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	6053      	str	r3, [r2, #4]
    while (!(USART2->SR & (1 << 6))); // Wait for TC bit to set
 8000680:	bf00      	nop
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <UART2_SendChar+0x2c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f9      	beq.n	8000682 <UART2_SendChar+0x12>
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40004400 	.word	0x40004400

080006a0 <UART2_SendString>:

void UART2_SendString(char *string) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    while (*string != '\0') {
 80006a8:	e007      	b.n	80006ba <UART2_SendString+0x1a>
        UART2_SendChar(*string);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffde 	bl	8000670 <UART2_SendChar>
        string++;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3301      	adds	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
    while (*string != '\0') {
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1f3      	bne.n	80006aa <UART2_SendString+0xa>
    }
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <Usart2_config>:

void Usart2_config(void) {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 0);  // GPIOA enabled
 80006d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <Usart2_config+0xbc>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d4:	4a2c      	ldr	r2, [pc, #176]	@ (8000788 <Usart2_config+0xbc>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= (1 << 17); // USART2 enabled
 80006dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <Usart2_config+0xbc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a29      	ldr	r2, [pc, #164]	@ (8000788 <Usart2_config+0xbc>)
 80006e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER |= (2 << 4);  // Alternate function for PA2
 80006e8:	4b28      	ldr	r3, [pc, #160]	@ (800078c <Usart2_config+0xc0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a27      	ldr	r2, [pc, #156]	@ (800078c <Usart2_config+0xc0>)
 80006ee:	f043 0320 	orr.w	r3, r3, #32
 80006f2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << 6);  // Alternate function for PA3
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <Usart2_config+0xc0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a24      	ldr	r2, [pc, #144]	@ (800078c <Usart2_config+0xc0>)
 80006fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fe:	6013      	str	r3, [r2, #0]

    GPIOA->OSPEEDR |= (3 << 4);
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <Usart2_config+0xc0>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	4a21      	ldr	r2, [pc, #132]	@ (800078c <Usart2_config+0xc0>)
 8000706:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800070a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |= (3 << 6);
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <Usart2_config+0xc0>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <Usart2_config+0xc0>)
 8000712:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000716:	6093      	str	r3, [r2, #8]

    GPIOA->AFR[0] |= (7 << 8);  // AF7 for PA2
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <Usart2_config+0xc0>)
 800071a:	6a1b      	ldr	r3, [r3, #32]
 800071c:	4a1b      	ldr	r2, [pc, #108]	@ (800078c <Usart2_config+0xc0>)
 800071e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000722:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << 12); // AF7 for PA3
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <Usart2_config+0xc0>)
 8000726:	6a1b      	ldr	r3, [r3, #32]
 8000728:	4a18      	ldr	r2, [pc, #96]	@ (800078c <Usart2_config+0xc0>)
 800072a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800072e:	6213      	str	r3, [r2, #32]

    USART2->CR1 = 0x00;        // Clear all
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <Usart2_config+0xc4>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
    USART2->CR1 |= (1 << 13);  // Enable USART2
 8000736:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <Usart2_config+0xc4>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <Usart2_config+0xc4>)
 800073c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000740:	60d3      	str	r3, [r2, #12]
    USART2->CR1 &= ~(1 << 12); // M bit in USART_CR1 to define the word length
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <Usart2_config+0xc4>)
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <Usart2_config+0xc4>)
 8000748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800074c:	60d3      	str	r3, [r2, #12]
    USART2->BRR |= (1 << 0);   // USART_BRR register
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <Usart2_config+0xc4>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <Usart2_config+0xc4>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6093      	str	r3, [r2, #8]
    USART2->BRR |= (24 << 4);  // USART_BRR register -> 11000
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <Usart2_config+0xc4>)
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <Usart2_config+0xc4>)
 8000760:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8000764:	6093      	str	r3, [r2, #8]
    USART2->CR1 |= (1 << 2);   // Receiver RE enabled
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <Usart2_config+0xc4>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	4a09      	ldr	r2, [pc, #36]	@ (8000790 <Usart2_config+0xc4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= (1 << 3);   // Transmitter TE enabled
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <Usart2_config+0xc4>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	4a06      	ldr	r2, [pc, #24]	@ (8000790 <Usart2_config+0xc4>)
 8000778:	f043 0308 	orr.w	r3, r3, #8
 800077c:	60d3      	str	r3, [r2, #12]
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40004400 	.word	0x40004400

08000794 <receiverdata>:

uint8_t receiverdata(void) {
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
    while (!(USART2->SR & (1 << 5))); // Wait for RXNE bit to set
 800079a:	bf00      	nop
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <receiverdata+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0f9      	beq.n	800079c <receiverdata+0x8>
    uint8_t data = USART2->DR;
 80007a8:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <receiverdata+0x28>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	71fb      	strb	r3, [r7, #7]
    return data;
 80007ae:	79fb      	ldrb	r3, [r7, #7]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40004400 	.word	0x40004400

080007c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c0:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	@ (80007fc <LoopForever+0x6>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	@ (8000800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <LoopForever+0xe>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	@ (800080c <LoopForever+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ee:	f000 f837 	bl	8000860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f2:	f7ff fdef 	bl	80003d4 <main>

080007f6 <LoopForever>:

LoopForever:
  b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   r0, =_estack
 80007f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000804:	080012e4 	.word	0x080012e4
  ldr r2, =_sbss
 8000808:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800080c:	200001b8 	.word	0x200001b8

08000810 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <BusFault_Handler>
	...

08000814 <siprintf>:
 8000814:	b40e      	push	{r1, r2, r3}
 8000816:	b500      	push	{lr}
 8000818:	b09c      	sub	sp, #112	@ 0x70
 800081a:	ab1d      	add	r3, sp, #116	@ 0x74
 800081c:	9002      	str	r0, [sp, #8]
 800081e:	9006      	str	r0, [sp, #24]
 8000820:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000824:	4809      	ldr	r0, [pc, #36]	@ (800084c <siprintf+0x38>)
 8000826:	9107      	str	r1, [sp, #28]
 8000828:	9104      	str	r1, [sp, #16]
 800082a:	4909      	ldr	r1, [pc, #36]	@ (8000850 <siprintf+0x3c>)
 800082c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000830:	9105      	str	r1, [sp, #20]
 8000832:	6800      	ldr	r0, [r0, #0]
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	a902      	add	r1, sp, #8
 8000838:	f000 f98c 	bl	8000b54 <_svfiprintf_r>
 800083c:	9b02      	ldr	r3, [sp, #8]
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	b01c      	add	sp, #112	@ 0x70
 8000844:	f85d eb04 	ldr.w	lr, [sp], #4
 8000848:	b003      	add	sp, #12
 800084a:	4770      	bx	lr
 800084c:	20000000 	.word	0x20000000
 8000850:	ffff0208 	.word	0xffff0208

08000854 <__errno>:
 8000854:	4b01      	ldr	r3, [pc, #4]	@ (800085c <__errno+0x8>)
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000000 	.word	0x20000000

08000860 <__libc_init_array>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	4d0d      	ldr	r5, [pc, #52]	@ (8000898 <__libc_init_array+0x38>)
 8000864:	4c0d      	ldr	r4, [pc, #52]	@ (800089c <__libc_init_array+0x3c>)
 8000866:	1b64      	subs	r4, r4, r5
 8000868:	10a4      	asrs	r4, r4, #2
 800086a:	2600      	movs	r6, #0
 800086c:	42a6      	cmp	r6, r4
 800086e:	d109      	bne.n	8000884 <__libc_init_array+0x24>
 8000870:	4d0b      	ldr	r5, [pc, #44]	@ (80008a0 <__libc_init_array+0x40>)
 8000872:	4c0c      	ldr	r4, [pc, #48]	@ (80008a4 <__libc_init_array+0x44>)
 8000874:	f000 fc66 	bl	8001144 <_init>
 8000878:	1b64      	subs	r4, r4, r5
 800087a:	10a4      	asrs	r4, r4, #2
 800087c:	2600      	movs	r6, #0
 800087e:	42a6      	cmp	r6, r4
 8000880:	d105      	bne.n	800088e <__libc_init_array+0x2e>
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f855 3b04 	ldr.w	r3, [r5], #4
 8000888:	4798      	blx	r3
 800088a:	3601      	adds	r6, #1
 800088c:	e7ee      	b.n	800086c <__libc_init_array+0xc>
 800088e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000892:	4798      	blx	r3
 8000894:	3601      	adds	r6, #1
 8000896:	e7f2      	b.n	800087e <__libc_init_array+0x1e>
 8000898:	080012dc 	.word	0x080012dc
 800089c:	080012dc 	.word	0x080012dc
 80008a0:	080012dc 	.word	0x080012dc
 80008a4:	080012e0 	.word	0x080012e0

080008a8 <__retarget_lock_acquire_recursive>:
 80008a8:	4770      	bx	lr

080008aa <__retarget_lock_release_recursive>:
 80008aa:	4770      	bx	lr

080008ac <_free_r>:
 80008ac:	b538      	push	{r3, r4, r5, lr}
 80008ae:	4605      	mov	r5, r0
 80008b0:	2900      	cmp	r1, #0
 80008b2:	d041      	beq.n	8000938 <_free_r+0x8c>
 80008b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008b8:	1f0c      	subs	r4, r1, #4
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bfb8      	it	lt
 80008be:	18e4      	addlt	r4, r4, r3
 80008c0:	f000 f8e0 	bl	8000a84 <__malloc_lock>
 80008c4:	4a1d      	ldr	r2, [pc, #116]	@ (800093c <_free_r+0x90>)
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	b933      	cbnz	r3, 80008d8 <_free_r+0x2c>
 80008ca:	6063      	str	r3, [r4, #4]
 80008cc:	6014      	str	r4, [r2, #0]
 80008ce:	4628      	mov	r0, r5
 80008d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008d4:	f000 b8dc 	b.w	8000a90 <__malloc_unlock>
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <_free_r+0x42>
 80008dc:	6820      	ldr	r0, [r4, #0]
 80008de:	1821      	adds	r1, r4, r0
 80008e0:	428b      	cmp	r3, r1
 80008e2:	bf01      	itttt	eq
 80008e4:	6819      	ldreq	r1, [r3, #0]
 80008e6:	685b      	ldreq	r3, [r3, #4]
 80008e8:	1809      	addeq	r1, r1, r0
 80008ea:	6021      	streq	r1, [r4, #0]
 80008ec:	e7ed      	b.n	80008ca <_free_r+0x1e>
 80008ee:	461a      	mov	r2, r3
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	b10b      	cbz	r3, 80008f8 <_free_r+0x4c>
 80008f4:	42a3      	cmp	r3, r4
 80008f6:	d9fa      	bls.n	80008ee <_free_r+0x42>
 80008f8:	6811      	ldr	r1, [r2, #0]
 80008fa:	1850      	adds	r0, r2, r1
 80008fc:	42a0      	cmp	r0, r4
 80008fe:	d10b      	bne.n	8000918 <_free_r+0x6c>
 8000900:	6820      	ldr	r0, [r4, #0]
 8000902:	4401      	add	r1, r0
 8000904:	1850      	adds	r0, r2, r1
 8000906:	4283      	cmp	r3, r0
 8000908:	6011      	str	r1, [r2, #0]
 800090a:	d1e0      	bne.n	80008ce <_free_r+0x22>
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	6053      	str	r3, [r2, #4]
 8000912:	4408      	add	r0, r1
 8000914:	6010      	str	r0, [r2, #0]
 8000916:	e7da      	b.n	80008ce <_free_r+0x22>
 8000918:	d902      	bls.n	8000920 <_free_r+0x74>
 800091a:	230c      	movs	r3, #12
 800091c:	602b      	str	r3, [r5, #0]
 800091e:	e7d6      	b.n	80008ce <_free_r+0x22>
 8000920:	6820      	ldr	r0, [r4, #0]
 8000922:	1821      	adds	r1, r4, r0
 8000924:	428b      	cmp	r3, r1
 8000926:	bf04      	itt	eq
 8000928:	6819      	ldreq	r1, [r3, #0]
 800092a:	685b      	ldreq	r3, [r3, #4]
 800092c:	6063      	str	r3, [r4, #4]
 800092e:	bf04      	itt	eq
 8000930:	1809      	addeq	r1, r1, r0
 8000932:	6021      	streq	r1, [r4, #0]
 8000934:	6054      	str	r4, [r2, #4]
 8000936:	e7ca      	b.n	80008ce <_free_r+0x22>
 8000938:	bd38      	pop	{r3, r4, r5, pc}
 800093a:	bf00      	nop
 800093c:	200001b4 	.word	0x200001b4

08000940 <sbrk_aligned>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	4e0f      	ldr	r6, [pc, #60]	@ (8000980 <sbrk_aligned+0x40>)
 8000944:	460c      	mov	r4, r1
 8000946:	6831      	ldr	r1, [r6, #0]
 8000948:	4605      	mov	r5, r0
 800094a:	b911      	cbnz	r1, 8000952 <sbrk_aligned+0x12>
 800094c:	f000 fba6 	bl	800109c <_sbrk_r>
 8000950:	6030      	str	r0, [r6, #0]
 8000952:	4621      	mov	r1, r4
 8000954:	4628      	mov	r0, r5
 8000956:	f000 fba1 	bl	800109c <_sbrk_r>
 800095a:	1c43      	adds	r3, r0, #1
 800095c:	d103      	bne.n	8000966 <sbrk_aligned+0x26>
 800095e:	f04f 34ff 	mov.w	r4, #4294967295
 8000962:	4620      	mov	r0, r4
 8000964:	bd70      	pop	{r4, r5, r6, pc}
 8000966:	1cc4      	adds	r4, r0, #3
 8000968:	f024 0403 	bic.w	r4, r4, #3
 800096c:	42a0      	cmp	r0, r4
 800096e:	d0f8      	beq.n	8000962 <sbrk_aligned+0x22>
 8000970:	1a21      	subs	r1, r4, r0
 8000972:	4628      	mov	r0, r5
 8000974:	f000 fb92 	bl	800109c <_sbrk_r>
 8000978:	3001      	adds	r0, #1
 800097a:	d1f2      	bne.n	8000962 <sbrk_aligned+0x22>
 800097c:	e7ef      	b.n	800095e <sbrk_aligned+0x1e>
 800097e:	bf00      	nop
 8000980:	200001b0 	.word	0x200001b0

08000984 <_malloc_r>:
 8000984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000988:	1ccd      	adds	r5, r1, #3
 800098a:	f025 0503 	bic.w	r5, r5, #3
 800098e:	3508      	adds	r5, #8
 8000990:	2d0c      	cmp	r5, #12
 8000992:	bf38      	it	cc
 8000994:	250c      	movcc	r5, #12
 8000996:	2d00      	cmp	r5, #0
 8000998:	4606      	mov	r6, r0
 800099a:	db01      	blt.n	80009a0 <_malloc_r+0x1c>
 800099c:	42a9      	cmp	r1, r5
 800099e:	d904      	bls.n	80009aa <_malloc_r+0x26>
 80009a0:	230c      	movs	r3, #12
 80009a2:	6033      	str	r3, [r6, #0]
 80009a4:	2000      	movs	r0, #0
 80009a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a80 <_malloc_r+0xfc>
 80009ae:	f000 f869 	bl	8000a84 <__malloc_lock>
 80009b2:	f8d8 3000 	ldr.w	r3, [r8]
 80009b6:	461c      	mov	r4, r3
 80009b8:	bb44      	cbnz	r4, 8000a0c <_malloc_r+0x88>
 80009ba:	4629      	mov	r1, r5
 80009bc:	4630      	mov	r0, r6
 80009be:	f7ff ffbf 	bl	8000940 <sbrk_aligned>
 80009c2:	1c43      	adds	r3, r0, #1
 80009c4:	4604      	mov	r4, r0
 80009c6:	d158      	bne.n	8000a7a <_malloc_r+0xf6>
 80009c8:	f8d8 4000 	ldr.w	r4, [r8]
 80009cc:	4627      	mov	r7, r4
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d143      	bne.n	8000a5a <_malloc_r+0xd6>
 80009d2:	2c00      	cmp	r4, #0
 80009d4:	d04b      	beq.n	8000a6e <_malloc_r+0xea>
 80009d6:	6823      	ldr	r3, [r4, #0]
 80009d8:	4639      	mov	r1, r7
 80009da:	4630      	mov	r0, r6
 80009dc:	eb04 0903 	add.w	r9, r4, r3
 80009e0:	f000 fb5c 	bl	800109c <_sbrk_r>
 80009e4:	4581      	cmp	r9, r0
 80009e6:	d142      	bne.n	8000a6e <_malloc_r+0xea>
 80009e8:	6821      	ldr	r1, [r4, #0]
 80009ea:	1a6d      	subs	r5, r5, r1
 80009ec:	4629      	mov	r1, r5
 80009ee:	4630      	mov	r0, r6
 80009f0:	f7ff ffa6 	bl	8000940 <sbrk_aligned>
 80009f4:	3001      	adds	r0, #1
 80009f6:	d03a      	beq.n	8000a6e <_malloc_r+0xea>
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	442b      	add	r3, r5
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	f8d8 3000 	ldr.w	r3, [r8]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	bb62      	cbnz	r2, 8000a60 <_malloc_r+0xdc>
 8000a06:	f8c8 7000 	str.w	r7, [r8]
 8000a0a:	e00f      	b.n	8000a2c <_malloc_r+0xa8>
 8000a0c:	6822      	ldr	r2, [r4, #0]
 8000a0e:	1b52      	subs	r2, r2, r5
 8000a10:	d420      	bmi.n	8000a54 <_malloc_r+0xd0>
 8000a12:	2a0b      	cmp	r2, #11
 8000a14:	d917      	bls.n	8000a46 <_malloc_r+0xc2>
 8000a16:	1961      	adds	r1, r4, r5
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	6025      	str	r5, [r4, #0]
 8000a1c:	bf18      	it	ne
 8000a1e:	6059      	strne	r1, [r3, #4]
 8000a20:	6863      	ldr	r3, [r4, #4]
 8000a22:	bf08      	it	eq
 8000a24:	f8c8 1000 	streq.w	r1, [r8]
 8000a28:	5162      	str	r2, [r4, r5]
 8000a2a:	604b      	str	r3, [r1, #4]
 8000a2c:	4630      	mov	r0, r6
 8000a2e:	f000 f82f 	bl	8000a90 <__malloc_unlock>
 8000a32:	f104 000b 	add.w	r0, r4, #11
 8000a36:	1d23      	adds	r3, r4, #4
 8000a38:	f020 0007 	bic.w	r0, r0, #7
 8000a3c:	1ac2      	subs	r2, r0, r3
 8000a3e:	bf1c      	itt	ne
 8000a40:	1a1b      	subne	r3, r3, r0
 8000a42:	50a3      	strne	r3, [r4, r2]
 8000a44:	e7af      	b.n	80009a6 <_malloc_r+0x22>
 8000a46:	6862      	ldr	r2, [r4, #4]
 8000a48:	42a3      	cmp	r3, r4
 8000a4a:	bf0c      	ite	eq
 8000a4c:	f8c8 2000 	streq.w	r2, [r8]
 8000a50:	605a      	strne	r2, [r3, #4]
 8000a52:	e7eb      	b.n	8000a2c <_malloc_r+0xa8>
 8000a54:	4623      	mov	r3, r4
 8000a56:	6864      	ldr	r4, [r4, #4]
 8000a58:	e7ae      	b.n	80009b8 <_malloc_r+0x34>
 8000a5a:	463c      	mov	r4, r7
 8000a5c:	687f      	ldr	r7, [r7, #4]
 8000a5e:	e7b6      	b.n	80009ce <_malloc_r+0x4a>
 8000a60:	461a      	mov	r2, r3
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	d1fb      	bne.n	8000a60 <_malloc_r+0xdc>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	6053      	str	r3, [r2, #4]
 8000a6c:	e7de      	b.n	8000a2c <_malloc_r+0xa8>
 8000a6e:	230c      	movs	r3, #12
 8000a70:	6033      	str	r3, [r6, #0]
 8000a72:	4630      	mov	r0, r6
 8000a74:	f000 f80c 	bl	8000a90 <__malloc_unlock>
 8000a78:	e794      	b.n	80009a4 <_malloc_r+0x20>
 8000a7a:	6005      	str	r5, [r0, #0]
 8000a7c:	e7d6      	b.n	8000a2c <_malloc_r+0xa8>
 8000a7e:	bf00      	nop
 8000a80:	200001b4 	.word	0x200001b4

08000a84 <__malloc_lock>:
 8000a84:	4801      	ldr	r0, [pc, #4]	@ (8000a8c <__malloc_lock+0x8>)
 8000a86:	f7ff bf0f 	b.w	80008a8 <__retarget_lock_acquire_recursive>
 8000a8a:	bf00      	nop
 8000a8c:	200001ac 	.word	0x200001ac

08000a90 <__malloc_unlock>:
 8000a90:	4801      	ldr	r0, [pc, #4]	@ (8000a98 <__malloc_unlock+0x8>)
 8000a92:	f7ff bf0a 	b.w	80008aa <__retarget_lock_release_recursive>
 8000a96:	bf00      	nop
 8000a98:	200001ac 	.word	0x200001ac

08000a9c <__ssputs_r>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	688e      	ldr	r6, [r1, #8]
 8000aa2:	461f      	mov	r7, r3
 8000aa4:	42be      	cmp	r6, r7
 8000aa6:	680b      	ldr	r3, [r1, #0]
 8000aa8:	4682      	mov	sl, r0
 8000aaa:	460c      	mov	r4, r1
 8000aac:	4690      	mov	r8, r2
 8000aae:	d82d      	bhi.n	8000b0c <__ssputs_r+0x70>
 8000ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ab4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000ab8:	d026      	beq.n	8000b08 <__ssputs_r+0x6c>
 8000aba:	6965      	ldr	r5, [r4, #20]
 8000abc:	6909      	ldr	r1, [r1, #16]
 8000abe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ac2:	eba3 0901 	sub.w	r9, r3, r1
 8000ac6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000aca:	1c7b      	adds	r3, r7, #1
 8000acc:	444b      	add	r3, r9
 8000ace:	106d      	asrs	r5, r5, #1
 8000ad0:	429d      	cmp	r5, r3
 8000ad2:	bf38      	it	cc
 8000ad4:	461d      	movcc	r5, r3
 8000ad6:	0553      	lsls	r3, r2, #21
 8000ad8:	d527      	bpl.n	8000b2a <__ssputs_r+0x8e>
 8000ada:	4629      	mov	r1, r5
 8000adc:	f7ff ff52 	bl	8000984 <_malloc_r>
 8000ae0:	4606      	mov	r6, r0
 8000ae2:	b360      	cbz	r0, 8000b3e <__ssputs_r+0xa2>
 8000ae4:	6921      	ldr	r1, [r4, #16]
 8000ae6:	464a      	mov	r2, r9
 8000ae8:	f000 fae8 	bl	80010bc <memcpy>
 8000aec:	89a3      	ldrh	r3, [r4, #12]
 8000aee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af6:	81a3      	strh	r3, [r4, #12]
 8000af8:	6126      	str	r6, [r4, #16]
 8000afa:	6165      	str	r5, [r4, #20]
 8000afc:	444e      	add	r6, r9
 8000afe:	eba5 0509 	sub.w	r5, r5, r9
 8000b02:	6026      	str	r6, [r4, #0]
 8000b04:	60a5      	str	r5, [r4, #8]
 8000b06:	463e      	mov	r6, r7
 8000b08:	42be      	cmp	r6, r7
 8000b0a:	d900      	bls.n	8000b0e <__ssputs_r+0x72>
 8000b0c:	463e      	mov	r6, r7
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	4632      	mov	r2, r6
 8000b12:	4641      	mov	r1, r8
 8000b14:	f000 faa8 	bl	8001068 <memmove>
 8000b18:	68a3      	ldr	r3, [r4, #8]
 8000b1a:	1b9b      	subs	r3, r3, r6
 8000b1c:	60a3      	str	r3, [r4, #8]
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	4433      	add	r3, r6
 8000b22:	6023      	str	r3, [r4, #0]
 8000b24:	2000      	movs	r0, #0
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	462a      	mov	r2, r5
 8000b2c:	f000 fad4 	bl	80010d8 <_realloc_r>
 8000b30:	4606      	mov	r6, r0
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d1e0      	bne.n	8000af8 <__ssputs_r+0x5c>
 8000b36:	6921      	ldr	r1, [r4, #16]
 8000b38:	4650      	mov	r0, sl
 8000b3a:	f7ff feb7 	bl	80008ac <_free_r>
 8000b3e:	230c      	movs	r3, #12
 8000b40:	f8ca 3000 	str.w	r3, [sl]
 8000b44:	89a3      	ldrh	r3, [r4, #12]
 8000b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4a:	81a3      	strh	r3, [r4, #12]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	e7e9      	b.n	8000b26 <__ssputs_r+0x8a>
	...

08000b54 <_svfiprintf_r>:
 8000b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b58:	4698      	mov	r8, r3
 8000b5a:	898b      	ldrh	r3, [r1, #12]
 8000b5c:	061b      	lsls	r3, r3, #24
 8000b5e:	b09d      	sub	sp, #116	@ 0x74
 8000b60:	4607      	mov	r7, r0
 8000b62:	460d      	mov	r5, r1
 8000b64:	4614      	mov	r4, r2
 8000b66:	d510      	bpl.n	8000b8a <_svfiprintf_r+0x36>
 8000b68:	690b      	ldr	r3, [r1, #16]
 8000b6a:	b973      	cbnz	r3, 8000b8a <_svfiprintf_r+0x36>
 8000b6c:	2140      	movs	r1, #64	@ 0x40
 8000b6e:	f7ff ff09 	bl	8000984 <_malloc_r>
 8000b72:	6028      	str	r0, [r5, #0]
 8000b74:	6128      	str	r0, [r5, #16]
 8000b76:	b930      	cbnz	r0, 8000b86 <_svfiprintf_r+0x32>
 8000b78:	230c      	movs	r3, #12
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	b01d      	add	sp, #116	@ 0x74
 8000b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b86:	2340      	movs	r3, #64	@ 0x40
 8000b88:	616b      	str	r3, [r5, #20]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b8e:	2320      	movs	r3, #32
 8000b90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b98:	2330      	movs	r3, #48	@ 0x30
 8000b9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000d38 <_svfiprintf_r+0x1e4>
 8000b9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ba2:	f04f 0901 	mov.w	r9, #1
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	469a      	mov	sl, r3
 8000baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bae:	b10a      	cbz	r2, 8000bb4 <_svfiprintf_r+0x60>
 8000bb0:	2a25      	cmp	r2, #37	@ 0x25
 8000bb2:	d1f9      	bne.n	8000ba8 <_svfiprintf_r+0x54>
 8000bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8000bb8:	d00b      	beq.n	8000bd2 <_svfiprintf_r+0x7e>
 8000bba:	465b      	mov	r3, fp
 8000bbc:	4622      	mov	r2, r4
 8000bbe:	4629      	mov	r1, r5
 8000bc0:	4638      	mov	r0, r7
 8000bc2:	f7ff ff6b 	bl	8000a9c <__ssputs_r>
 8000bc6:	3001      	adds	r0, #1
 8000bc8:	f000 80a7 	beq.w	8000d1a <_svfiprintf_r+0x1c6>
 8000bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000bce:	445a      	add	r2, fp
 8000bd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8000bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 809f 	beq.w	8000d1a <_svfiprintf_r+0x1c6>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f04f 32ff 	mov.w	r2, #4294967295
 8000be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000be6:	f10a 0a01 	add.w	sl, sl, #1
 8000bea:	9304      	str	r3, [sp, #16]
 8000bec:	9307      	str	r3, [sp, #28]
 8000bee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000bf2:	931a      	str	r3, [sp, #104]	@ 0x68
 8000bf4:	4654      	mov	r4, sl
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bfc:	484e      	ldr	r0, [pc, #312]	@ (8000d38 <_svfiprintf_r+0x1e4>)
 8000bfe:	f7ff fb07 	bl	8000210 <memchr>
 8000c02:	9a04      	ldr	r2, [sp, #16]
 8000c04:	b9d8      	cbnz	r0, 8000c3e <_svfiprintf_r+0xea>
 8000c06:	06d0      	lsls	r0, r2, #27
 8000c08:	bf44      	itt	mi
 8000c0a:	2320      	movmi	r3, #32
 8000c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c10:	0711      	lsls	r1, r2, #28
 8000c12:	bf44      	itt	mi
 8000c14:	232b      	movmi	r3, #43	@ 0x2b
 8000c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8000c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c20:	d015      	beq.n	8000c4e <_svfiprintf_r+0xfa>
 8000c22:	9a07      	ldr	r2, [sp, #28]
 8000c24:	4654      	mov	r4, sl
 8000c26:	2000      	movs	r0, #0
 8000c28:	f04f 0c0a 	mov.w	ip, #10
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c32:	3b30      	subs	r3, #48	@ 0x30
 8000c34:	2b09      	cmp	r3, #9
 8000c36:	d94b      	bls.n	8000cd0 <_svfiprintf_r+0x17c>
 8000c38:	b1b0      	cbz	r0, 8000c68 <_svfiprintf_r+0x114>
 8000c3a:	9207      	str	r2, [sp, #28]
 8000c3c:	e014      	b.n	8000c68 <_svfiprintf_r+0x114>
 8000c3e:	eba0 0308 	sub.w	r3, r0, r8
 8000c42:	fa09 f303 	lsl.w	r3, r9, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	9304      	str	r3, [sp, #16]
 8000c4a:	46a2      	mov	sl, r4
 8000c4c:	e7d2      	b.n	8000bf4 <_svfiprintf_r+0xa0>
 8000c4e:	9b03      	ldr	r3, [sp, #12]
 8000c50:	1d19      	adds	r1, r3, #4
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	9103      	str	r1, [sp, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bfbb      	ittet	lt
 8000c5a:	425b      	neglt	r3, r3
 8000c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8000c60:	9307      	strge	r3, [sp, #28]
 8000c62:	9307      	strlt	r3, [sp, #28]
 8000c64:	bfb8      	it	lt
 8000c66:	9204      	strlt	r2, [sp, #16]
 8000c68:	7823      	ldrb	r3, [r4, #0]
 8000c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c6c:	d10a      	bne.n	8000c84 <_svfiprintf_r+0x130>
 8000c6e:	7863      	ldrb	r3, [r4, #1]
 8000c70:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c72:	d132      	bne.n	8000cda <_svfiprintf_r+0x186>
 8000c74:	9b03      	ldr	r3, [sp, #12]
 8000c76:	1d1a      	adds	r2, r3, #4
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	9203      	str	r2, [sp, #12]
 8000c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c80:	3402      	adds	r4, #2
 8000c82:	9305      	str	r3, [sp, #20]
 8000c84:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000d3c <_svfiprintf_r+0x1e8>
 8000c88:	7821      	ldrb	r1, [r4, #0]
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	4650      	mov	r0, sl
 8000c8e:	f7ff fabf 	bl	8000210 <memchr>
 8000c92:	b138      	cbz	r0, 8000ca4 <_svfiprintf_r+0x150>
 8000c94:	9b04      	ldr	r3, [sp, #16]
 8000c96:	eba0 000a 	sub.w	r0, r0, sl
 8000c9a:	2240      	movs	r2, #64	@ 0x40
 8000c9c:	4082      	lsls	r2, r0
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	3401      	adds	r4, #1
 8000ca2:	9304      	str	r3, [sp, #16]
 8000ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ca8:	4825      	ldr	r0, [pc, #148]	@ (8000d40 <_svfiprintf_r+0x1ec>)
 8000caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000cae:	2206      	movs	r2, #6
 8000cb0:	f7ff faae 	bl	8000210 <memchr>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d036      	beq.n	8000d26 <_svfiprintf_r+0x1d2>
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <_svfiprintf_r+0x1f0>)
 8000cba:	bb1b      	cbnz	r3, 8000d04 <_svfiprintf_r+0x1b0>
 8000cbc:	9b03      	ldr	r3, [sp, #12]
 8000cbe:	3307      	adds	r3, #7
 8000cc0:	f023 0307 	bic.w	r3, r3, #7
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	9303      	str	r3, [sp, #12]
 8000cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000cca:	4433      	add	r3, r6
 8000ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cce:	e76a      	b.n	8000ba6 <_svfiprintf_r+0x52>
 8000cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cd4:	460c      	mov	r4, r1
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	e7a8      	b.n	8000c2c <_svfiprintf_r+0xd8>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	3401      	adds	r4, #1
 8000cde:	9305      	str	r3, [sp, #20]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f04f 0c0a 	mov.w	ip, #10
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cec:	3a30      	subs	r2, #48	@ 0x30
 8000cee:	2a09      	cmp	r2, #9
 8000cf0:	d903      	bls.n	8000cfa <_svfiprintf_r+0x1a6>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0c6      	beq.n	8000c84 <_svfiprintf_r+0x130>
 8000cf6:	9105      	str	r1, [sp, #20]
 8000cf8:	e7c4      	b.n	8000c84 <_svfiprintf_r+0x130>
 8000cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cfe:	4604      	mov	r4, r0
 8000d00:	2301      	movs	r3, #1
 8000d02:	e7f0      	b.n	8000ce6 <_svfiprintf_r+0x192>
 8000d04:	ab03      	add	r3, sp, #12
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	462a      	mov	r2, r5
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <_svfiprintf_r+0x1f4>)
 8000d0c:	a904      	add	r1, sp, #16
 8000d0e:	4638      	mov	r0, r7
 8000d10:	f3af 8000 	nop.w
 8000d14:	1c42      	adds	r2, r0, #1
 8000d16:	4606      	mov	r6, r0
 8000d18:	d1d6      	bne.n	8000cc8 <_svfiprintf_r+0x174>
 8000d1a:	89ab      	ldrh	r3, [r5, #12]
 8000d1c:	065b      	lsls	r3, r3, #25
 8000d1e:	f53f af2d 	bmi.w	8000b7c <_svfiprintf_r+0x28>
 8000d22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d24:	e72c      	b.n	8000b80 <_svfiprintf_r+0x2c>
 8000d26:	ab03      	add	r3, sp, #12
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	462a      	mov	r2, r5
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <_svfiprintf_r+0x1f4>)
 8000d2e:	a904      	add	r1, sp, #16
 8000d30:	4638      	mov	r0, r7
 8000d32:	f000 f879 	bl	8000e28 <_printf_i>
 8000d36:	e7ed      	b.n	8000d14 <_svfiprintf_r+0x1c0>
 8000d38:	080012a1 	.word	0x080012a1
 8000d3c:	080012a7 	.word	0x080012a7
 8000d40:	080012ab 	.word	0x080012ab
 8000d44:	00000000 	.word	0x00000000
 8000d48:	08000a9d 	.word	0x08000a9d

08000d4c <_printf_common>:
 8000d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d50:	4616      	mov	r6, r2
 8000d52:	4698      	mov	r8, r3
 8000d54:	688a      	ldr	r2, [r1, #8]
 8000d56:	690b      	ldr	r3, [r1, #16]
 8000d58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	bfb8      	it	lt
 8000d60:	4613      	movlt	r3, r2
 8000d62:	6033      	str	r3, [r6, #0]
 8000d64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d68:	4607      	mov	r7, r0
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	b10a      	cbz	r2, 8000d72 <_printf_common+0x26>
 8000d6e:	3301      	adds	r3, #1
 8000d70:	6033      	str	r3, [r6, #0]
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	0699      	lsls	r1, r3, #26
 8000d76:	bf42      	ittt	mi
 8000d78:	6833      	ldrmi	r3, [r6, #0]
 8000d7a:	3302      	addmi	r3, #2
 8000d7c:	6033      	strmi	r3, [r6, #0]
 8000d7e:	6825      	ldr	r5, [r4, #0]
 8000d80:	f015 0506 	ands.w	r5, r5, #6
 8000d84:	d106      	bne.n	8000d94 <_printf_common+0x48>
 8000d86:	f104 0a19 	add.w	sl, r4, #25
 8000d8a:	68e3      	ldr	r3, [r4, #12]
 8000d8c:	6832      	ldr	r2, [r6, #0]
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	dc26      	bgt.n	8000de2 <_printf_common+0x96>
 8000d94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	3b00      	subs	r3, #0
 8000d9c:	bf18      	it	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	0692      	lsls	r2, r2, #26
 8000da2:	d42b      	bmi.n	8000dfc <_printf_common+0xb0>
 8000da4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000da8:	4641      	mov	r1, r8
 8000daa:	4638      	mov	r0, r7
 8000dac:	47c8      	blx	r9
 8000dae:	3001      	adds	r0, #1
 8000db0:	d01e      	beq.n	8000df0 <_printf_common+0xa4>
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	6922      	ldr	r2, [r4, #16]
 8000db6:	f003 0306 	and.w	r3, r3, #6
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf02      	ittt	eq
 8000dbe:	68e5      	ldreq	r5, [r4, #12]
 8000dc0:	6833      	ldreq	r3, [r6, #0]
 8000dc2:	1aed      	subeq	r5, r5, r3
 8000dc4:	68a3      	ldr	r3, [r4, #8]
 8000dc6:	bf0c      	ite	eq
 8000dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000dcc:	2500      	movne	r5, #0
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	bfc4      	itt	gt
 8000dd2:	1a9b      	subgt	r3, r3, r2
 8000dd4:	18ed      	addgt	r5, r5, r3
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	341a      	adds	r4, #26
 8000dda:	42b5      	cmp	r5, r6
 8000ddc:	d11a      	bne.n	8000e14 <_printf_common+0xc8>
 8000dde:	2000      	movs	r0, #0
 8000de0:	e008      	b.n	8000df4 <_printf_common+0xa8>
 8000de2:	2301      	movs	r3, #1
 8000de4:	4652      	mov	r2, sl
 8000de6:	4641      	mov	r1, r8
 8000de8:	4638      	mov	r0, r7
 8000dea:	47c8      	blx	r9
 8000dec:	3001      	adds	r0, #1
 8000dee:	d103      	bne.n	8000df8 <_printf_common+0xac>
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	3501      	adds	r5, #1
 8000dfa:	e7c6      	b.n	8000d8a <_printf_common+0x3e>
 8000dfc:	18e1      	adds	r1, r4, r3
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	2030      	movs	r0, #48	@ 0x30
 8000e02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e06:	4422      	add	r2, r4
 8000e08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e10:	3302      	adds	r3, #2
 8000e12:	e7c7      	b.n	8000da4 <_printf_common+0x58>
 8000e14:	2301      	movs	r3, #1
 8000e16:	4622      	mov	r2, r4
 8000e18:	4641      	mov	r1, r8
 8000e1a:	4638      	mov	r0, r7
 8000e1c:	47c8      	blx	r9
 8000e1e:	3001      	adds	r0, #1
 8000e20:	d0e6      	beq.n	8000df0 <_printf_common+0xa4>
 8000e22:	3601      	adds	r6, #1
 8000e24:	e7d9      	b.n	8000dda <_printf_common+0x8e>
	...

08000e28 <_printf_i>:
 8000e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e2c:	7e0f      	ldrb	r7, [r1, #24]
 8000e2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e30:	2f78      	cmp	r7, #120	@ 0x78
 8000e32:	4691      	mov	r9, r2
 8000e34:	4680      	mov	r8, r0
 8000e36:	460c      	mov	r4, r1
 8000e38:	469a      	mov	sl, r3
 8000e3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e3e:	d807      	bhi.n	8000e50 <_printf_i+0x28>
 8000e40:	2f62      	cmp	r7, #98	@ 0x62
 8000e42:	d80a      	bhi.n	8000e5a <_printf_i+0x32>
 8000e44:	2f00      	cmp	r7, #0
 8000e46:	f000 80d2 	beq.w	8000fee <_printf_i+0x1c6>
 8000e4a:	2f58      	cmp	r7, #88	@ 0x58
 8000e4c:	f000 80b9 	beq.w	8000fc2 <_printf_i+0x19a>
 8000e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e58:	e03a      	b.n	8000ed0 <_printf_i+0xa8>
 8000e5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e5e:	2b15      	cmp	r3, #21
 8000e60:	d8f6      	bhi.n	8000e50 <_printf_i+0x28>
 8000e62:	a101      	add	r1, pc, #4	@ (adr r1, 8000e68 <_printf_i+0x40>)
 8000e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e68:	08000ec1 	.word	0x08000ec1
 8000e6c:	08000ed5 	.word	0x08000ed5
 8000e70:	08000e51 	.word	0x08000e51
 8000e74:	08000e51 	.word	0x08000e51
 8000e78:	08000e51 	.word	0x08000e51
 8000e7c:	08000e51 	.word	0x08000e51
 8000e80:	08000ed5 	.word	0x08000ed5
 8000e84:	08000e51 	.word	0x08000e51
 8000e88:	08000e51 	.word	0x08000e51
 8000e8c:	08000e51 	.word	0x08000e51
 8000e90:	08000e51 	.word	0x08000e51
 8000e94:	08000fd5 	.word	0x08000fd5
 8000e98:	08000eff 	.word	0x08000eff
 8000e9c:	08000f8f 	.word	0x08000f8f
 8000ea0:	08000e51 	.word	0x08000e51
 8000ea4:	08000e51 	.word	0x08000e51
 8000ea8:	08000ff7 	.word	0x08000ff7
 8000eac:	08000e51 	.word	0x08000e51
 8000eb0:	08000eff 	.word	0x08000eff
 8000eb4:	08000e51 	.word	0x08000e51
 8000eb8:	08000e51 	.word	0x08000e51
 8000ebc:	08000f97 	.word	0x08000f97
 8000ec0:	6833      	ldr	r3, [r6, #0]
 8000ec2:	1d1a      	adds	r2, r3, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6032      	str	r2, [r6, #0]
 8000ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e09d      	b.n	8001010 <_printf_i+0x1e8>
 8000ed4:	6833      	ldr	r3, [r6, #0]
 8000ed6:	6820      	ldr	r0, [r4, #0]
 8000ed8:	1d19      	adds	r1, r3, #4
 8000eda:	6031      	str	r1, [r6, #0]
 8000edc:	0606      	lsls	r6, r0, #24
 8000ede:	d501      	bpl.n	8000ee4 <_printf_i+0xbc>
 8000ee0:	681d      	ldr	r5, [r3, #0]
 8000ee2:	e003      	b.n	8000eec <_printf_i+0xc4>
 8000ee4:	0645      	lsls	r5, r0, #25
 8000ee6:	d5fb      	bpl.n	8000ee0 <_printf_i+0xb8>
 8000ee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	da03      	bge.n	8000ef8 <_printf_i+0xd0>
 8000ef0:	232d      	movs	r3, #45	@ 0x2d
 8000ef2:	426d      	negs	r5, r5
 8000ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ef8:	4859      	ldr	r0, [pc, #356]	@ (8001060 <_printf_i+0x238>)
 8000efa:	230a      	movs	r3, #10
 8000efc:	e011      	b.n	8000f22 <_printf_i+0xfa>
 8000efe:	6821      	ldr	r1, [r4, #0]
 8000f00:	6833      	ldr	r3, [r6, #0]
 8000f02:	0608      	lsls	r0, r1, #24
 8000f04:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f08:	d402      	bmi.n	8000f10 <_printf_i+0xe8>
 8000f0a:	0649      	lsls	r1, r1, #25
 8000f0c:	bf48      	it	mi
 8000f0e:	b2ad      	uxthmi	r5, r5
 8000f10:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f12:	4853      	ldr	r0, [pc, #332]	@ (8001060 <_printf_i+0x238>)
 8000f14:	6033      	str	r3, [r6, #0]
 8000f16:	bf14      	ite	ne
 8000f18:	230a      	movne	r3, #10
 8000f1a:	2308      	moveq	r3, #8
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f22:	6866      	ldr	r6, [r4, #4]
 8000f24:	60a6      	str	r6, [r4, #8]
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	bfa2      	ittt	ge
 8000f2a:	6821      	ldrge	r1, [r4, #0]
 8000f2c:	f021 0104 	bicge.w	r1, r1, #4
 8000f30:	6021      	strge	r1, [r4, #0]
 8000f32:	b90d      	cbnz	r5, 8000f38 <_printf_i+0x110>
 8000f34:	2e00      	cmp	r6, #0
 8000f36:	d04b      	beq.n	8000fd0 <_printf_i+0x1a8>
 8000f38:	4616      	mov	r6, r2
 8000f3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f3e:	fb03 5711 	mls	r7, r3, r1, r5
 8000f42:	5dc7      	ldrb	r7, [r0, r7]
 8000f44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f48:	462f      	mov	r7, r5
 8000f4a:	42bb      	cmp	r3, r7
 8000f4c:	460d      	mov	r5, r1
 8000f4e:	d9f4      	bls.n	8000f3a <_printf_i+0x112>
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d10b      	bne.n	8000f6c <_printf_i+0x144>
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	07df      	lsls	r7, r3, #31
 8000f58:	d508      	bpl.n	8000f6c <_printf_i+0x144>
 8000f5a:	6923      	ldr	r3, [r4, #16]
 8000f5c:	6861      	ldr	r1, [r4, #4]
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	bfde      	ittt	le
 8000f62:	2330      	movle	r3, #48	@ 0x30
 8000f64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f6c:	1b92      	subs	r2, r2, r6
 8000f6e:	6122      	str	r2, [r4, #16]
 8000f70:	f8cd a000 	str.w	sl, [sp]
 8000f74:	464b      	mov	r3, r9
 8000f76:	aa03      	add	r2, sp, #12
 8000f78:	4621      	mov	r1, r4
 8000f7a:	4640      	mov	r0, r8
 8000f7c:	f7ff fee6 	bl	8000d4c <_printf_common>
 8000f80:	3001      	adds	r0, #1
 8000f82:	d14a      	bne.n	800101a <_printf_i+0x1f2>
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	b004      	add	sp, #16
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	f043 0320 	orr.w	r3, r3, #32
 8000f94:	6023      	str	r3, [r4, #0]
 8000f96:	4833      	ldr	r0, [pc, #204]	@ (8001064 <_printf_i+0x23c>)
 8000f98:	2778      	movs	r7, #120	@ 0x78
 8000f9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	6831      	ldr	r1, [r6, #0]
 8000fa2:	061f      	lsls	r7, r3, #24
 8000fa4:	f851 5b04 	ldr.w	r5, [r1], #4
 8000fa8:	d402      	bmi.n	8000fb0 <_printf_i+0x188>
 8000faa:	065f      	lsls	r7, r3, #25
 8000fac:	bf48      	it	mi
 8000fae:	b2ad      	uxthmi	r5, r5
 8000fb0:	6031      	str	r1, [r6, #0]
 8000fb2:	07d9      	lsls	r1, r3, #31
 8000fb4:	bf44      	itt	mi
 8000fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8000fba:	6023      	strmi	r3, [r4, #0]
 8000fbc:	b11d      	cbz	r5, 8000fc6 <_printf_i+0x19e>
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	e7ac      	b.n	8000f1c <_printf_i+0xf4>
 8000fc2:	4827      	ldr	r0, [pc, #156]	@ (8001060 <_printf_i+0x238>)
 8000fc4:	e7e9      	b.n	8000f9a <_printf_i+0x172>
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	f023 0320 	bic.w	r3, r3, #32
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	e7f6      	b.n	8000fbe <_printf_i+0x196>
 8000fd0:	4616      	mov	r6, r2
 8000fd2:	e7bd      	b.n	8000f50 <_printf_i+0x128>
 8000fd4:	6833      	ldr	r3, [r6, #0]
 8000fd6:	6825      	ldr	r5, [r4, #0]
 8000fd8:	6961      	ldr	r1, [r4, #20]
 8000fda:	1d18      	adds	r0, r3, #4
 8000fdc:	6030      	str	r0, [r6, #0]
 8000fde:	062e      	lsls	r6, r5, #24
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	d501      	bpl.n	8000fe8 <_printf_i+0x1c0>
 8000fe4:	6019      	str	r1, [r3, #0]
 8000fe6:	e002      	b.n	8000fee <_printf_i+0x1c6>
 8000fe8:	0668      	lsls	r0, r5, #25
 8000fea:	d5fb      	bpl.n	8000fe4 <_printf_i+0x1bc>
 8000fec:	8019      	strh	r1, [r3, #0]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	6123      	str	r3, [r4, #16]
 8000ff2:	4616      	mov	r6, r2
 8000ff4:	e7bc      	b.n	8000f70 <_printf_i+0x148>
 8000ff6:	6833      	ldr	r3, [r6, #0]
 8000ff8:	1d1a      	adds	r2, r3, #4
 8000ffa:	6032      	str	r2, [r6, #0]
 8000ffc:	681e      	ldr	r6, [r3, #0]
 8000ffe:	6862      	ldr	r2, [r4, #4]
 8001000:	2100      	movs	r1, #0
 8001002:	4630      	mov	r0, r6
 8001004:	f7ff f904 	bl	8000210 <memchr>
 8001008:	b108      	cbz	r0, 800100e <_printf_i+0x1e6>
 800100a:	1b80      	subs	r0, r0, r6
 800100c:	6060      	str	r0, [r4, #4]
 800100e:	6863      	ldr	r3, [r4, #4]
 8001010:	6123      	str	r3, [r4, #16]
 8001012:	2300      	movs	r3, #0
 8001014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001018:	e7aa      	b.n	8000f70 <_printf_i+0x148>
 800101a:	6923      	ldr	r3, [r4, #16]
 800101c:	4632      	mov	r2, r6
 800101e:	4649      	mov	r1, r9
 8001020:	4640      	mov	r0, r8
 8001022:	47d0      	blx	sl
 8001024:	3001      	adds	r0, #1
 8001026:	d0ad      	beq.n	8000f84 <_printf_i+0x15c>
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	079b      	lsls	r3, r3, #30
 800102c:	d413      	bmi.n	8001056 <_printf_i+0x22e>
 800102e:	68e0      	ldr	r0, [r4, #12]
 8001030:	9b03      	ldr	r3, [sp, #12]
 8001032:	4298      	cmp	r0, r3
 8001034:	bfb8      	it	lt
 8001036:	4618      	movlt	r0, r3
 8001038:	e7a6      	b.n	8000f88 <_printf_i+0x160>
 800103a:	2301      	movs	r3, #1
 800103c:	4632      	mov	r2, r6
 800103e:	4649      	mov	r1, r9
 8001040:	4640      	mov	r0, r8
 8001042:	47d0      	blx	sl
 8001044:	3001      	adds	r0, #1
 8001046:	d09d      	beq.n	8000f84 <_printf_i+0x15c>
 8001048:	3501      	adds	r5, #1
 800104a:	68e3      	ldr	r3, [r4, #12]
 800104c:	9903      	ldr	r1, [sp, #12]
 800104e:	1a5b      	subs	r3, r3, r1
 8001050:	42ab      	cmp	r3, r5
 8001052:	dcf2      	bgt.n	800103a <_printf_i+0x212>
 8001054:	e7eb      	b.n	800102e <_printf_i+0x206>
 8001056:	2500      	movs	r5, #0
 8001058:	f104 0619 	add.w	r6, r4, #25
 800105c:	e7f5      	b.n	800104a <_printf_i+0x222>
 800105e:	bf00      	nop
 8001060:	080012b2 	.word	0x080012b2
 8001064:	080012c3 	.word	0x080012c3

08001068 <memmove>:
 8001068:	4288      	cmp	r0, r1
 800106a:	b510      	push	{r4, lr}
 800106c:	eb01 0402 	add.w	r4, r1, r2
 8001070:	d902      	bls.n	8001078 <memmove+0x10>
 8001072:	4284      	cmp	r4, r0
 8001074:	4623      	mov	r3, r4
 8001076:	d807      	bhi.n	8001088 <memmove+0x20>
 8001078:	1e43      	subs	r3, r0, #1
 800107a:	42a1      	cmp	r1, r4
 800107c:	d008      	beq.n	8001090 <memmove+0x28>
 800107e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001086:	e7f8      	b.n	800107a <memmove+0x12>
 8001088:	4402      	add	r2, r0
 800108a:	4601      	mov	r1, r0
 800108c:	428a      	cmp	r2, r1
 800108e:	d100      	bne.n	8001092 <memmove+0x2a>
 8001090:	bd10      	pop	{r4, pc}
 8001092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800109a:	e7f7      	b.n	800108c <memmove+0x24>

0800109c <_sbrk_r>:
 800109c:	b538      	push	{r3, r4, r5, lr}
 800109e:	4d06      	ldr	r5, [pc, #24]	@ (80010b8 <_sbrk_r+0x1c>)
 80010a0:	2300      	movs	r3, #0
 80010a2:	4604      	mov	r4, r0
 80010a4:	4608      	mov	r0, r1
 80010a6:	602b      	str	r3, [r5, #0]
 80010a8:	f7ff faac 	bl	8000604 <_sbrk>
 80010ac:	1c43      	adds	r3, r0, #1
 80010ae:	d102      	bne.n	80010b6 <_sbrk_r+0x1a>
 80010b0:	682b      	ldr	r3, [r5, #0]
 80010b2:	b103      	cbz	r3, 80010b6 <_sbrk_r+0x1a>
 80010b4:	6023      	str	r3, [r4, #0]
 80010b6:	bd38      	pop	{r3, r4, r5, pc}
 80010b8:	200001a8 	.word	0x200001a8

080010bc <memcpy>:
 80010bc:	440a      	add	r2, r1
 80010be:	4291      	cmp	r1, r2
 80010c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010c4:	d100      	bne.n	80010c8 <memcpy+0xc>
 80010c6:	4770      	bx	lr
 80010c8:	b510      	push	{r4, lr}
 80010ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80010d2:	4291      	cmp	r1, r2
 80010d4:	d1f9      	bne.n	80010ca <memcpy+0xe>
 80010d6:	bd10      	pop	{r4, pc}

080010d8 <_realloc_r>:
 80010d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4615      	mov	r5, r2
 80010e0:	460c      	mov	r4, r1
 80010e2:	b921      	cbnz	r1, 80010ee <_realloc_r+0x16>
 80010e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010e8:	4611      	mov	r1, r2
 80010ea:	f7ff bc4b 	b.w	8000984 <_malloc_r>
 80010ee:	b92a      	cbnz	r2, 80010fc <_realloc_r+0x24>
 80010f0:	f7ff fbdc 	bl	80008ac <_free_r>
 80010f4:	2400      	movs	r4, #0
 80010f6:	4620      	mov	r0, r4
 80010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010fc:	f000 f81a 	bl	8001134 <_malloc_usable_size_r>
 8001100:	4285      	cmp	r5, r0
 8001102:	4606      	mov	r6, r0
 8001104:	d802      	bhi.n	800110c <_realloc_r+0x34>
 8001106:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800110a:	d8f4      	bhi.n	80010f6 <_realloc_r+0x1e>
 800110c:	4629      	mov	r1, r5
 800110e:	4640      	mov	r0, r8
 8001110:	f7ff fc38 	bl	8000984 <_malloc_r>
 8001114:	4607      	mov	r7, r0
 8001116:	2800      	cmp	r0, #0
 8001118:	d0ec      	beq.n	80010f4 <_realloc_r+0x1c>
 800111a:	42b5      	cmp	r5, r6
 800111c:	462a      	mov	r2, r5
 800111e:	4621      	mov	r1, r4
 8001120:	bf28      	it	cs
 8001122:	4632      	movcs	r2, r6
 8001124:	f7ff ffca 	bl	80010bc <memcpy>
 8001128:	4621      	mov	r1, r4
 800112a:	4640      	mov	r0, r8
 800112c:	f7ff fbbe 	bl	80008ac <_free_r>
 8001130:	463c      	mov	r4, r7
 8001132:	e7e0      	b.n	80010f6 <_realloc_r+0x1e>

08001134 <_malloc_usable_size_r>:
 8001134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001138:	1f18      	subs	r0, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	bfbc      	itt	lt
 800113e:	580b      	ldrlt	r3, [r1, r0]
 8001140:	18c0      	addlt	r0, r0, r3
 8001142:	4770      	bx	lr

08001144 <_init>:
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	bf00      	nop
 8001148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114a:	bc08      	pop	{r3}
 800114c:	469e      	mov	lr, r3
 800114e:	4770      	bx	lr

08001150 <_fini>:
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001152:	bf00      	nop
 8001154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001156:	bc08      	pop	{r3}
 8001158:	469e      	mov	lr, r3
 800115a:	4770      	bx	lr
